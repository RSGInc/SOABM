SOABMDashboard.html <- readLines(file.path(OUTPUT_PATH, "SOABMDashboard.html"))
idx <- which(SOABMDashboard.html == "window.FlexDashboardComponents = [];")[1]
SOABMDashboard.html <- append(SOABMDashboard.html, "L_PREFER_CANVAS = true;", after = idx)
writeLines(SOABMDashboard.html, file.path(OUTPUT_PATH, "SOABMDashboard.html"))
### Generate dashboard
rmarkdown::render(file.path(SYSTEM_TEMPLATES_PATH, "SOABMDashboard.Rmd"),
output_dir = OUTPUT_PATH,
intermediates_dir = OUTPUT_PATH, quiet = TRUE)
SOABMDashboard.html <- readLines(file.path(OUTPUT_PATH, "SOABMDashboard.html"))
idx <- which(SOABMDashboard.html == "window.FlexDashboardComponents = [];")[1]
SOABMDashboard.html <- append(SOABMDashboard.html, "L_PREFER_CANVAS = true;", after = idx)
writeLines(SOABMDashboard.html, file.path(OUTPUT_PATH, "SOABMDashboard.html"))
### Generate dashboard
rmarkdown::render(file.path(SYSTEM_TEMPLATES_PATH, "SOABMDashboard.Rmd"),
output_dir = OUTPUT_PATH,
intermediates_dir = OUTPUT_PATH, quiet = TRUE)
SOABMDashboard.html <- readLines(file.path(OUTPUT_PATH, "SOABMDashboard.html"))
idx <- which(SOABMDashboard.html == "window.FlexDashboardComponents = [];")[1]
SOABMDashboard.html <- append(SOABMDashboard.html, "L_PREFER_CANVAS = true;", after = idx)
writeLines(SOABMDashboard.html, file.path(OUTPUT_PATH, "SOABMDashboard.html"))
### Generate dashboard
rmarkdown::render(file.path(SYSTEM_TEMPLATES_PATH, "SOABMDashboard.Rmd"),
output_dir = OUTPUT_PATH,
intermediates_dir = OUTPUT_PATH, quiet = TRUE)
SOABMDashboard.html <- readLines(file.path(OUTPUT_PATH, "SOABMDashboard.html"))
idx <- which(SOABMDashboard.html == "window.FlexDashboardComponents = [];")[1]
SOABMDashboard.html <- append(SOABMDashboard.html, "L_PREFER_CANVAS = true;", after = idx)
writeLines(SOABMDashboard.html, file.path(OUTPUT_PATH, "SOABMDashboard.html"))
### Generate dashboard
rmarkdown::render(file.path(SYSTEM_TEMPLATES_PATH, "SOABMDashboard.Rmd"),
output_dir = OUTPUT_PATH,
intermediates_dir = OUTPUT_PATH, quiet = TRUE)
SOABMDashboard.html <- readLines(file.path(OUTPUT_PATH, "SOABMDashboard.html"))
idx <- which(SOABMDashboard.html == "window.FlexDashboardComponents = [];")[1]
SOABMDashboard.html <- append(SOABMDashboard.html, "L_PREFER_CANVAS = true;", after = idx)
writeLines(SOABMDashboard.html, file.path(OUTPUT_PATH, "SOABMDashboard.html"))
### Generate dashboard
rmarkdown::render(file.path(SYSTEM_TEMPLATES_PATH, "SOABMDashboard.Rmd"),
output_dir = OUTPUT_PATH,
intermediates_dir = OUTPUT_PATH, quiet = TRUE)
SOABMDashboard.html <- readLines(file.path(OUTPUT_PATH, "SOABMDashboard.html"))
idx <- which(SOABMDashboard.html == "window.FlexDashboardComponents = [];")[1]
SOABMDashboard.html <- append(SOABMDashboard.html, "L_PREFER_CANVAS = true;", after = idx)
writeLines(SOABMDashboard.html, file.path(OUTPUT_PATH, "SOABMDashboard.html"))
### Generate dashboard
rmarkdown::render(file.path(SYSTEM_TEMPLATES_PATH, "SOABMDashboard.Rmd"),
output_dir = OUTPUT_PATH,
intermediates_dir = OUTPUT_PATH, quiet = TRUE)
SOABMDashboard.html <- readLines(file.path(OUTPUT_PATH, "SOABMDashboard.html"))
idx <- which(SOABMDashboard.html == "window.FlexDashboardComponents = [];")[1]
SOABMDashboard.html <- append(SOABMDashboard.html, "L_PREFER_CANVAS = true;", after = idx)
writeLines(SOABMDashboard.html, file.path(OUTPUT_PATH, "SOABMDashboard.html"))
colors()[grep("green",colors())]
### Generate dashboard
rmarkdown::render(file.path(SYSTEM_TEMPLATES_PATH, "SOABMDashboard.Rmd"),
output_dir = OUTPUT_PATH,
intermediates_dir = OUTPUT_PATH, quiet = TRUE)
SOABMDashboard.html <- readLines(file.path(OUTPUT_PATH, "SOABMDashboard.html"))
idx <- which(SOABMDashboard.html == "window.FlexDashboardComponents = [];")[1]
SOABMDashboard.html <- append(SOABMDashboard.html, "L_PREFER_CANVAS = true;", after = idx)
writeLines(SOABMDashboard.html, file.path(OUTPUT_PATH, "SOABMDashboard.html"))
### Generate dashboard
rmarkdown::render(file.path(SYSTEM_TEMPLATES_PATH, "SOABMDashboard.Rmd"),
output_dir = OUTPUT_PATH,
intermediates_dir = OUTPUT_PATH, quiet = TRUE)
SOABMDashboard.html <- readLines(file.path(OUTPUT_PATH, "SOABMDashboard.html"))
idx <- which(SOABMDashboard.html == "window.FlexDashboardComponents = [];")[1]
SOABMDashboard.html <- append(SOABMDashboard.html, "L_PREFER_CANVAS = true;", after = idx)
writeLines(SOABMDashboard.html, file.path(OUTPUT_PATH, "SOABMDashboard.html"))
### Generate dashboard
rmarkdown::render(file.path(SYSTEM_TEMPLATES_PATH, "SOABMDashboard.Rmd"),
output_dir = OUTPUT_PATH,
intermediates_dir = OUTPUT_PATH, quiet = TRUE)
SOABMDashboard.html <- readLines(file.path(OUTPUT_PATH, "SOABMDashboard.html"))
idx <- which(SOABMDashboard.html == "window.FlexDashboardComponents = [];")[1]
SOABMDashboard.html <- append(SOABMDashboard.html, "L_PREFER_CANVAS = true;", after = idx)
writeLines(SOABMDashboard.html, file.path(OUTPUT_PATH, "SOABMDashboard.html"))
?tspanner
### Generate dashboard
rmarkdown::render(file.path(SYSTEM_TEMPLATES_PATH, "SOABMDashboard.Rmd"),
output_dir = OUTPUT_PATH,
intermediates_dir = OUTPUT_PATH, quiet = TRUE)
SOABMDashboard.html <- readLines(file.path(OUTPUT_PATH, "SOABMDashboard.html"))
idx <- which(SOABMDashboard.html == "window.FlexDashboardComponents = [];")[1]
SOABMDashboard.html <- append(SOABMDashboard.html, "L_PREFER_CANVAS = true;", after = idx)
writeLines(SOABMDashboard.html, file.path(OUTPUT_PATH, "SOABMDashboard.html"))
### Generate dashboard
rmarkdown::render(file.path(SYSTEM_TEMPLATES_PATH, "SOABMDashboard.Rmd"),
output_dir = OUTPUT_PATH,
intermediates_dir = OUTPUT_PATH, quiet = TRUE)
SOABMDashboard.html <- readLines(file.path(OUTPUT_PATH, "SOABMDashboard.html"))
idx <- which(SOABMDashboard.html == "window.FlexDashboardComponents = [];")[1]
SOABMDashboard.html <- append(SOABMDashboard.html, "L_PREFER_CANVAS = true;", after = idx)
writeLines(SOABMDashboard.html, file.path(OUTPUT_PATH, "SOABMDashboard.html"))
##################################################################################
# Master script to render final HTML file from R Markdown file
# Loads all required packages
#
# Make sure the 'plyr' is not loaded after 'dplyr' library in the same R session
# Under such case, the group_by features of dplyr library does not work. Restart RStudio and make sure
# plyr library is not loaded while generating dashboard
# For more info on this issue:
# https://stackoverflow.com/questions/26923862/why-are-my-dplyr-group-by-summarize-not-working-properly-name-collision-with
#
##################################################################################
### Initialization
# Load global variables
workingDir <- "E:/Projects/Clients/odot/SOABM_Visualizer"
source(paste(workingDir, "scripts/_SYSTEM_VARIABLES.R", sep = "/"))
SYSTEM_REPORT_PKGS <- c("DT", "flexdashboard", "leaflet", "geojsonio", "htmltools", "htmlwidgets", "kableExtra",
"knitr", "mapview", "plotly", "RColorBrewer", "rgdal", "rgeos", "crosstalk","treemap", "htmlTable",
"rmarkdown", "scales", "stringr", "jsonlite", "pander", "ggplot2", "reshape", "raster", "dplyr")
# Install all required R packages to the user specified directory [Make sure the R library directory has write permissions for the user]
#if (!"DT" %in% installed.packages()) install.packages("DT", repos='http://cran.us.r-project.org')
#if (!"leaflet" %in% installed.packages()) install.packages("leaflet", repos='http://cran.us.r-project.org')
#if (!"geojsonio" %in% installed.packages()) install.packages("geojsonio", repos='http://cran.us.r-project.org')
#if (!"htmltools" %in% installed.packages()) install.packages("htmltools", repos='http://cran.us.r-project.org')
#if (!"htmlwidgets" %in% installed.packages()) install.packages("htmlwidgets", repos='http://cran.us.r-project.org')
#if (!"knitr" %in% installed.packages()) install.packages("knitr", repos='http://cran.us.r-project.org')
#if (!"mapview" %in% installed.packages()) install.packages("mapview", repos='http://cran.us.r-project.org')
#if (!"RColorBrewer" %in% installed.packages()) install.packages("RColorBrewer", repos='http://cran.us.r-project.org')
#if (!"rgdal" %in% installed.packages()) install.packages("rgdal", repos='http://cran.us.r-project.org')
#if (!"rgeos" %in% installed.packages()) install.packages("rgeos", repos='http://cran.us.r-project.org')
#if (!"rmarkdown" %in% installed.packages()) install.packages("rmarkdown", repos='http://cran.us.r-project.org')
#if (!"scales" %in% installed.packages()) install.packages("scales", repos='http://cran.us.r-project.org')
#if (!"stringr" %in% installed.packages()) install.packages("stringr", repos='http://cran.us.r-project.org')
#if (!"jsonlite" %in% installed.packages()) install.packages("jsonlite", repos='http://cran.us.r-project.org')
#if (!"pander" %in% installed.packages()) install.packages("pander", repos='http://cran.us.r-project.org')
#if (!"dplyr" %in% installed.packages()) install.packages("dplyr", repos='http://cran.us.r-project.org')
#if (!"reshape" %in% installed.packages()) install.packages("reshape", repos='http://cran.us.r-project.org')
#if (!"kableExtra" %in% installed.packages()) install.packages("kableExtra", repos='http://cran.us.r-project.org')
##devtools::install_github("rstudio/flexdashboard")
##devtools::install_github("rstudio/crosstalk")
##devtools::install_github("ropensci/plotly")
##devtools::install_github("hadley/ggplot2")
#detach("package:plyr", unload=TRUE)
lapply(SYSTEM_REPORT_PKGS, library, character.only = TRUE)
### Read Target and Output SUmmary files
currDir <- getwd()
setwd(BASE_DATA_PATH)
base_csv = list.files(pattern="*.csv")
base_data <- lapply(base_csv, read.csv)
base_csv_names <- unlist(lapply(base_csv, function (x) {gsub(".csv", "", x)}))
setwd(BUILD_DATA_PATH)
build_csv = list.files(pattern="*.csv")
build_data <- lapply(build_csv, read.csv)
build_csv_names <- unlist(lapply(build_csv, function (x) {gsub(".csv", "", x)}))
## Read SHP file
setwd(SYSTEM_SHP_PATH)
zone_shp <- shapefile("zones_zone.shp")
zone_shp <- spTransform(zone_shp, CRS("+proj=longlat +ellps=GRS80"))
setwd(currDir)
### Generate dashboard
rmarkdown::render(file.path(SYSTEM_TEMPLATES_PATH, "SOABMDashboard.Rmd"),
output_dir = OUTPUT_PATH,
intermediates_dir = OUTPUT_PATH, quiet = TRUE)
SOABMDashboard.html <- readLines(file.path(OUTPUT_PATH, "SOABMDashboard.html"))
idx <- which(SOABMDashboard.html == "window.FlexDashboardComponents = [];")[1]
SOABMDashboard.html <- append(SOABMDashboard.html, "L_PREFER_CANVAS = true;", after = idx)
writeLines(SOABMDashboard.html, file.path(OUTPUT_PATH, "SOABMDashboard.html"))
# finish
if (!"DT" %in% installed.packages()) install.packages("DT", repos='http://cran.us.r-project.org')
lapply(SYSTEM_REPORT_PKGS, library, character.only = TRUE)
devtools::install_github("rstudio/flexdashboard")
if (!"flexdashboard" %in% installed.packages()) install.packages("flexdashboard", repos='http://cran.us.r-project.org')
lapply(SYSTEM_REPORT_PKGS, library, character.only = TRUE)
SYSTEM_REPORT_PKGS <- c("DT", "flexdashboard", "leaflet", "geojsonio", "htmltools", "htmlwidgets", "kableExtra",
"knitr", "mapview", "plotly", "RColorBrewer", "rgdal", "rgeos", "crosstalk","treemap", "htmlTable",
"rmarkdown", "scales", "stringr", "jsonlite", "pander", "ggplot2", "reshape", "raster", "dplyr")
lapply(SYSTEM_REPORT_PKGS, library, character.only = TRUE)
install.packages('lazyeval')
lapply(SYSTEM_REPORT_PKGS, library, character.only = TRUE)
install.packages('flexdashboard')
lapply(SYSTEM_REPORT_PKGS, library, character.only = TRUE)
library(flexdashboard)
install.packages(‘rprojroot’)
install.packages("rprojroot")
library(flexdashboard)
SYSTEM_REPORT_PKGS <- c("DT", "flexdashboard", "leaflet", "geojsonio", "htmltools", "htmlwidgets", "kableExtra",
"knitr", "mapview", "plotly", "RColorBrewer", "rgdal", "rgeos", "crosstalk","treemap", "htmlTable",
"rmarkdown", "scales", "stringr", "jsonlite", "pander", "ggplot2", "reshape", "raster", "dplyr")
#
lapply(SYSTEM_REPORT_PKGS, library, character.only = TRUE)
if (!"leaflet" %in% installed.packages()) install.packages("leaflet", repos='http://cran.us.r-project.org')
lapply(SYSTEM_REPORT_PKGS, library, character.only = TRUE)
install.packages("httpuv")
lapply(SYSTEM_REPORT_PKGS, library, character.only = TRUE)
install.packages("xtable")
lapply(SYSTEM_REPORT_PKGS, library, character.only = TRUE)
install.packages("geojsonio")
lapply(SYSTEM_REPORT_PKGS, library, character.only = TRUE)
install.packages("kableExtra")
lapply(SYSTEM_REPORT_PKGS, library, character.only = TRUE)
install.packages("mapview")
lapply(SYSTEM_REPORT_PKGS, library, character.only = TRUE)
install.packages("plotly")
lapply(SYSTEM_REPORT_PKGS, library, character.only = TRUE)
install.packages("treemap")
lapply(SYSTEM_REPORT_PKGS, library, character.only = TRUE)
install.packages("pander")
lapply(SYSTEM_REPORT_PKGS, library, character.only = TRUE)
install.packages("ggplot2")
##################################################################################
# Master script to render final HTML file from R Markdown file
# Loads all required packages
#
# Make sure the 'plyr' is not loaded after 'dplyr' library in the same R session
# Under such case, the group_by features of dplyr library does not work. Restart RStudio and make sure
# plyr library is not loaded while generating dashboard
# For more info on this issue:
# https://stackoverflow.com/questions/26923862/why-are-my-dplyr-group-by-summarize-not-working-properly-name-collision-with
#
##################################################################################
### Initialization
# Load global variables
workingDir <- "E:/Projects/Clients/odot/SOABM_Visualizer"
source(paste(workingDir, "scripts/_SYSTEM_VARIABLES.R", sep = "/"))
SYSTEM_REPORT_PKGS <- c("DT", "flexdashboard", "leaflet", "geojsonio", "htmltools", "htmlwidgets", "kableExtra",
"knitr", "mapview", "plotly", "RColorBrewer", "rgdal", "rgeos", "crosstalk","treemap", "htmlTable",
"rmarkdown", "scales", "stringr", "jsonlite", "pander", "ggplot2", "reshape", "raster", "dplyr")
# Install all required R packages to the user specified directory [Make sure the R library directory has write permissions for the user]
#if (!"flexdashboard" %in% installed.packages()) install.packages("flexdashboard", repos='http://cran.us.r-project.org')
#if (!"DT" %in% installed.packages()) install.packages("DT", repos='http://cran.us.r-project.org')
#if (!"leaflet" %in% installed.packages()) install.packages("leaflet", repos='http://cran.us.r-project.org')
#if (!"geojsonio" %in% installed.packages()) install.packages("geojsonio", repos='http://cran.us.r-project.org')
#if (!"htmltools" %in% installed.packages()) install.packages("htmltools", repos='http://cran.us.r-project.org')
#if (!"htmlwidgets" %in% installed.packages()) install.packages("htmlwidgets", repos='http://cran.us.r-project.org')
#if (!"knitr" %in% installed.packages()) install.packages("knitr", repos='http://cran.us.r-project.org')
#if (!"mapview" %in% installed.packages()) install.packages("mapview", repos='http://cran.us.r-project.org')
#if (!"RColorBrewer" %in% installed.packages()) install.packages("RColorBrewer", repos='http://cran.us.r-project.org')
#if (!"rgdal" %in% installed.packages()) install.packages("rgdal", repos='http://cran.us.r-project.org')
#if (!"rgeos" %in% installed.packages()) install.packages("rgeos", repos='http://cran.us.r-project.org')
#if (!"rmarkdown" %in% installed.packages()) install.packages("rmarkdown", repos='http://cran.us.r-project.org')
#if (!"scales" %in% installed.packages()) install.packages("scales", repos='http://cran.us.r-project.org')
#if (!"stringr" %in% installed.packages()) install.packages("stringr", repos='http://cran.us.r-project.org')
#if (!"jsonlite" %in% installed.packages()) install.packages("jsonlite", repos='http://cran.us.r-project.org')
#if (!"pander" %in% installed.packages()) install.packages("pander", repos='http://cran.us.r-project.org')
#if (!"dplyr" %in% installed.packages()) install.packages("dplyr", repos='http://cran.us.r-project.org')
#if (!"reshape" %in% installed.packages()) install.packages("reshape", repos='http://cran.us.r-project.org')
#if (!"kableExtra" %in% installed.packages()) install.packages("kableExtra", repos='http://cran.us.r-project.org')
##devtools::install_github("rstudio/flexdashboard")
##devtools::install_github("rstudio/crosstalk")
##devtools::install_github("ropensci/plotly")
##devtools::install_github("hadley/ggplot2")
#detach("package:plyr", unload=TRUE)
lapply(SYSTEM_REPORT_PKGS, library, character.only = TRUE)
### Read Target and Output SUmmary files
currDir <- getwd()
setwd(BASE_DATA_PATH)
base_csv = list.files(pattern="*.csv")
base_data <- lapply(base_csv, read.csv)
base_csv_names <- unlist(lapply(base_csv, function (x) {gsub(".csv", "", x)}))
setwd(BUILD_DATA_PATH)
build_csv = list.files(pattern="*.csv")
build_data <- lapply(build_csv, read.csv)
build_csv_names <- unlist(lapply(build_csv, function (x) {gsub(".csv", "", x)}))
## Read SHP file
setwd(SYSTEM_SHP_PATH)
zone_shp <- shapefile("zones_zone.shp")
zone_shp <- spTransform(zone_shp, CRS("+proj=longlat +ellps=GRS80"))
setwd(currDir)
### Generate dashboard
rmarkdown::render(file.path(SYSTEM_TEMPLATES_PATH, "SOABMDashboard.Rmd"),
output_dir = OUTPUT_PATH,
intermediates_dir = OUTPUT_PATH, quiet = TRUE)
SOABMDashboard.html <- readLines(file.path(OUTPUT_PATH, "SOABMDashboard.html"))
idx <- which(SOABMDashboard.html == "window.FlexDashboardComponents = [];")[1]
SOABMDashboard.html <- append(SOABMDashboard.html, "L_PREFER_CANVAS = true;", after = idx)
writeLines(SOABMDashboard.html, file.path(OUTPUT_PATH, "SOABMDashboard.html"))
# finish
base_df <- base_data[[which(base_csv_names=="LinkVolumes")]]
build_df <- build_data[[which(build_csv_names=="LinkVolumes")]]
counts_df <- data.frame(base_df, build_df$volume)
counts_df$FACTYPE <- facility_df$type[match(counts_df$FACTYPE, facility_df$code)]
counts_df$FACTYPE <- factor(counts_df$FACTYPE, levels = facility_types)
colnames(counts_df) <- c("CountLocation", "FACTYPE", "x", "y")
eq <- counts_df %>% group_by(FACTYPE) %>% do(V1 = lm_eqn(.))
y_pos <- c(13000, 14000, 15000, 16000, 17000, 18000, 19000)
eq$y_pos <- y_pos
p1 <- ggplot(counts_df, aes(x=x, y=y, color=FACTYPE)) +
geom_point(shape=1) +
geom_smooth(method=lm, formula = y ~ x - 1, se=FALSE) +
geom_abline(intercept = 0, slope = 1, linetype = 2) +
geom_text(data = eq, aes(x = 2500, y = y_pos,label=V1),  parse = TRUE) +
geom_text(x = 22500, y = 0,label = "- - - - : 45 Deg Line",  parse = TRUE, color = "black") +
labs(x="24 Hours Counts", y="24 Hours Volume")
p1 <- plotly_build(p1)
devtools::install_github("hadley/ggplot2")
install.packages("Rtools")
Sys.info()
version
##################################################################################
# Master script to render final HTML file from R Markdown file
# Loads all required packages
#
# Make sure the 'plyr' is not loaded after 'dplyr' library in the same R session
# Under such case, the group_by features of dplyr library does not work. Restart RStudio and make sure
# plyr library is not loaded while generating dashboard
# For more info on this issue:
# https://stackoverflow.com/questions/26923862/why-are-my-dplyr-group-by-summarize-not-working-properly-name-collision-with
#
##################################################################################
### Initialization
# Load global variables
workingDir <- "E:/Projects/Clients/odot/SOABM_Visualizer"
source(paste(workingDir, "scripts/_SYSTEM_VARIABLES.R", sep = "/"))
SYSTEM_REPORT_PKGS <- c("DT", "flexdashboard", "leaflet", "geojsonio", "htmltools", "htmlwidgets", "kableExtra",
"knitr", "mapview", "plotly", "RColorBrewer", "rgdal", "rgeos", "crosstalk","treemap", "htmlTable",
"rmarkdown", "scales", "stringr", "jsonlite", "pander", "ggplot2", "reshape", "raster", "dplyr")
# Install all required R packages to the user specified directory [Make sure the R library directory has write permissions for the user]
#if (!"flexdashboard" %in% installed.packages()) install.packages("flexdashboard", repos='http://cran.us.r-project.org')
#if (!"DT" %in% installed.packages()) install.packages("DT", repos='http://cran.us.r-project.org')
#if (!"leaflet" %in% installed.packages()) install.packages("leaflet", repos='http://cran.us.r-project.org')
#if (!"geojsonio" %in% installed.packages()) install.packages("geojsonio", repos='http://cran.us.r-project.org')
#if (!"htmltools" %in% installed.packages()) install.packages("htmltools", repos='http://cran.us.r-project.org')
#if (!"htmlwidgets" %in% installed.packages()) install.packages("htmlwidgets", repos='http://cran.us.r-project.org')
#if (!"knitr" %in% installed.packages()) install.packages("knitr", repos='http://cran.us.r-project.org')
#if (!"mapview" %in% installed.packages()) install.packages("mapview", repos='http://cran.us.r-project.org')
#if (!"RColorBrewer" %in% installed.packages()) install.packages("RColorBrewer", repos='http://cran.us.r-project.org')
#if (!"rgdal" %in% installed.packages()) install.packages("rgdal", repos='http://cran.us.r-project.org')
#if (!"rgeos" %in% installed.packages()) install.packages("rgeos", repos='http://cran.us.r-project.org')
#if (!"rmarkdown" %in% installed.packages()) install.packages("rmarkdown", repos='http://cran.us.r-project.org')
#if (!"scales" %in% installed.packages()) install.packages("scales", repos='http://cran.us.r-project.org')
#if (!"stringr" %in% installed.packages()) install.packages("stringr", repos='http://cran.us.r-project.org')
#if (!"jsonlite" %in% installed.packages()) install.packages("jsonlite", repos='http://cran.us.r-project.org')
#if (!"pander" %in% installed.packages()) install.packages("pander", repos='http://cran.us.r-project.org')
#if (!"dplyr" %in% installed.packages()) install.packages("dplyr", repos='http://cran.us.r-project.org')
#if (!"reshape" %in% installed.packages()) install.packages("reshape", repos='http://cran.us.r-project.org')
#if (!"kableExtra" %in% installed.packages()) install.packages("kableExtra", repos='http://cran.us.r-project.org')
##devtools::install_github("rstudio/flexdashboard")
##devtools::install_github("rstudio/crosstalk")
##devtools::install_github("ropensci/plotly")
##devtools::install_github("hadley/ggplot2")
##devtools::install_github("hadley/scales")
#detach("package:plyr", unload=TRUE)
lapply(SYSTEM_REPORT_PKGS, library, character.only = TRUE)
### Read Target and Output SUmmary files
currDir <- getwd()
setwd(BASE_DATA_PATH)
base_csv = list.files(pattern="*.csv")
base_data <- lapply(base_csv, read.csv)
base_csv_names <- unlist(lapply(base_csv, function (x) {gsub(".csv", "", x)}))
setwd(BUILD_DATA_PATH)
build_csv = list.files(pattern="*.csv")
build_data <- lapply(build_csv, read.csv)
build_csv_names <- unlist(lapply(build_csv, function (x) {gsub(".csv", "", x)}))
## Read SHP file
setwd(SYSTEM_SHP_PATH)
zone_shp <- shapefile("zones_zone.shp")
zone_shp <- spTransform(zone_shp, CRS("+proj=longlat +ellps=GRS80"))
setwd(currDir)
### Generate dashboard
rmarkdown::render(file.path(SYSTEM_TEMPLATES_PATH, "SOABMDashboard.Rmd"),
output_dir = OUTPUT_PATH,
intermediates_dir = OUTPUT_PATH, quiet = TRUE)
SOABMDashboard.html <- readLines(file.path(OUTPUT_PATH, "SOABMDashboard.html"))
idx <- which(SOABMDashboard.html == "window.FlexDashboardComponents = [];")[1]
SOABMDashboard.html <- append(SOABMDashboard.html, "L_PREFER_CANVAS = true;", after = idx)
writeLines(SOABMDashboard.html, file.path(OUTPUT_PATH, "SOABMDashboard.html"))
# finish
##################################################################################
# Master script to render final HTML file from R Markdown file
# Loads all required packages
#
# Make sure the 'plyr' is not loaded after 'dplyr' library in the same R session
# Under such case, the group_by features of dplyr library does not work. Restart RStudio and make sure
# plyr library is not loaded while generating dashboard
# For more info on this issue:
# https://stackoverflow.com/questions/26923862/why-are-my-dplyr-group-by-summarize-not-working-properly-name-collision-with
#
##################################################################################
### Initialization
# Load global variables
workingDir <- "E:/Projects/Clients/odot/SOABM_Visualizer"
localLib   <- "E:/projects/clients/sandag/TO21_AB2_Calibration/SANDAG_Visualizer/dependencies/R-3.4.1/library"
.libPaths(localLib)
source(paste(workingDir, "scripts/_SYSTEM_VARIABLES.R", sep = "/"))
SYSTEM_REPORT_PKGS <- c("DT", "flexdashboard", "leaflet", "geojsonio", "htmltools", "htmlwidgets", "kableExtra",
"knitr", "mapview", "plotly", "RColorBrewer", "rgdal", "rgeos", "crosstalk","treemap", "htmlTable",
"rmarkdown", "scales", "stringr", "jsonlite", "pander", "ggplot2", "reshape", "raster", "dplyr")
# Install all required R packages to the user specified directory [Make sure the R library directory has write permissions for the user]
#if (!"flexdashboard" %in% installed.packages()) install.packages("flexdashboard", repos='http://cran.us.r-project.org')
#if (!"DT" %in% installed.packages()) install.packages("DT", repos='http://cran.us.r-project.org')
#if (!"leaflet" %in% installed.packages()) install.packages("leaflet", repos='http://cran.us.r-project.org')
#if (!"geojsonio" %in% installed.packages()) install.packages("geojsonio", repos='http://cran.us.r-project.org')
#if (!"htmltools" %in% installed.packages()) install.packages("htmltools", repos='http://cran.us.r-project.org')
#if (!"htmlwidgets" %in% installed.packages()) install.packages("htmlwidgets", repos='http://cran.us.r-project.org')
#if (!"knitr" %in% installed.packages()) install.packages("knitr", repos='http://cran.us.r-project.org')
#if (!"mapview" %in% installed.packages()) install.packages("mapview", repos='http://cran.us.r-project.org')
#if (!"RColorBrewer" %in% installed.packages()) install.packages("RColorBrewer", repos='http://cran.us.r-project.org')
#if (!"rgdal" %in% installed.packages()) install.packages("rgdal", repos='http://cran.us.r-project.org')
#if (!"rgeos" %in% installed.packages()) install.packages("rgeos", repos='http://cran.us.r-project.org')
#if (!"rmarkdown" %in% installed.packages()) install.packages("rmarkdown", repos='http://cran.us.r-project.org')
#if (!"scales" %in% installed.packages()) install.packages("scales", repos='http://cran.us.r-project.org')
#if (!"stringr" %in% installed.packages()) install.packages("stringr", repos='http://cran.us.r-project.org')
#if (!"jsonlite" %in% installed.packages()) install.packages("jsonlite", repos='http://cran.us.r-project.org')
#if (!"pander" %in% installed.packages()) install.packages("pander", repos='http://cran.us.r-project.org')
#if (!"dplyr" %in% installed.packages()) install.packages("dplyr", repos='http://cran.us.r-project.org')
#if (!"reshape" %in% installed.packages()) install.packages("reshape", repos='http://cran.us.r-project.org')
#if (!"kableExtra" %in% installed.packages()) install.packages("kableExtra", repos='http://cran.us.r-project.org')
##devtools::install_github("rstudio/flexdashboard")
##devtools::install_github("rstudio/crosstalk")
##devtools::install_github("ropensci/plotly")
##devtools::install_github("hadley/ggplot2")
##devtools::install_github("hadley/scales")
#detach("package:plyr", unload=TRUE)
lapply(SYSTEM_REPORT_PKGS, library, character.only = TRUE)
### Read Target and Output SUmmary files
currDir <- getwd()
setwd(BASE_DATA_PATH)
base_csv = list.files(pattern="*.csv")
base_data <- lapply(base_csv, read.csv)
base_csv_names <- unlist(lapply(base_csv, function (x) {gsub(".csv", "", x)}))
setwd(BUILD_DATA_PATH)
build_csv = list.files(pattern="*.csv")
build_data <- lapply(build_csv, read.csv)
build_csv_names <- unlist(lapply(build_csv, function (x) {gsub(".csv", "", x)}))
## Read SHP file
setwd(SYSTEM_SHP_PATH)
zone_shp <- shapefile("zones_zone.shp")
zone_shp <- spTransform(zone_shp, CRS("+proj=longlat +ellps=GRS80"))
setwd(currDir)
### Generate dashboard
rmarkdown::render(file.path(SYSTEM_TEMPLATES_PATH, "SOABMDashboard.Rmd"),
output_dir = OUTPUT_PATH,
intermediates_dir = OUTPUT_PATH, quiet = TRUE)
SOABMDashboard.html <- readLines(file.path(OUTPUT_PATH, "SOABMDashboard.html"))
idx <- which(SOABMDashboard.html == "window.FlexDashboardComponents = [];")[1]
SOABMDashboard.html <- append(SOABMDashboard.html, "L_PREFER_CANVAS = true;", after = idx)
writeLines(SOABMDashboard.html, file.path(OUTPUT_PATH, "SOABMDashboard.html"))
# finish
.libPaths()
##################################################################################
# Master script to render final HTML file from R Markdown file
# Loads all required packages
#
# Make sure the 'plyr' is not loaded after 'dplyr' library in the same R session
# Under such case, the group_by features of dplyr library does not work. Restart RStudio and make sure
# plyr library is not loaded while generating dashboard
# For more info on this issue:
# https://stackoverflow.com/questions/26923862/why-are-my-dplyr-group-by-summarize-not-working-properly-name-collision-with
#
##################################################################################
### Initialization
# Load global variables
workingDir <- "E:/Projects/Clients/odot/SOABM_Visualizer"
localLib   <- "E:/projects/clients/sandag/TO21_AB2_Calibration/SOABM_Visualizer/dependencies/R-3.4.1/library"
.libPaths(localLib)
source(paste(workingDir, "scripts/_SYSTEM_VARIABLES.R", sep = "/"))
SYSTEM_REPORT_PKGS <- c("DT", "flexdashboard", "leaflet", "geojsonio", "htmltools", "htmlwidgets", "kableExtra",
"knitr", "mapview", "plotly", "RColorBrewer", "rgdal", "rgeos", "crosstalk","treemap", "htmlTable",
"rmarkdown", "scales", "stringr", "jsonlite", "pander", "ggplot2", "reshape", "raster", "dplyr")
# Install all required R packages to the user specified directory [Make sure the R library directory has write permissions for the user]
#if (!"flexdashboard" %in% installed.packages()) install.packages("flexdashboard", repos='http://cran.us.r-project.org')
#if (!"DT" %in% installed.packages()) install.packages("DT", repos='http://cran.us.r-project.org')
#if (!"leaflet" %in% installed.packages()) install.packages("leaflet", repos='http://cran.us.r-project.org')
#if (!"geojsonio" %in% installed.packages()) install.packages("geojsonio", repos='http://cran.us.r-project.org')
#if (!"htmltools" %in% installed.packages()) install.packages("htmltools", repos='http://cran.us.r-project.org')
#if (!"htmlwidgets" %in% installed.packages()) install.packages("htmlwidgets", repos='http://cran.us.r-project.org')
#if (!"knitr" %in% installed.packages()) install.packages("knitr", repos='http://cran.us.r-project.org')
#if (!"mapview" %in% installed.packages()) install.packages("mapview", repos='http://cran.us.r-project.org')
#if (!"RColorBrewer" %in% installed.packages()) install.packages("RColorBrewer", repos='http://cran.us.r-project.org')
#if (!"rgdal" %in% installed.packages()) install.packages("rgdal", repos='http://cran.us.r-project.org')
#if (!"rgeos" %in% installed.packages()) install.packages("rgeos", repos='http://cran.us.r-project.org')
#if (!"rmarkdown" %in% installed.packages()) install.packages("rmarkdown", repos='http://cran.us.r-project.org')
#if (!"scales" %in% installed.packages()) install.packages("scales", repos='http://cran.us.r-project.org')
#if (!"stringr" %in% installed.packages()) install.packages("stringr", repos='http://cran.us.r-project.org')
#if (!"jsonlite" %in% installed.packages()) install.packages("jsonlite", repos='http://cran.us.r-project.org')
#if (!"pander" %in% installed.packages()) install.packages("pander", repos='http://cran.us.r-project.org')
#if (!"dplyr" %in% installed.packages()) install.packages("dplyr", repos='http://cran.us.r-project.org')
#if (!"reshape" %in% installed.packages()) install.packages("reshape", repos='http://cran.us.r-project.org')
#if (!"kableExtra" %in% installed.packages()) install.packages("kableExtra", repos='http://cran.us.r-project.org')
##devtools::install_github("rstudio/flexdashboard")
##devtools::install_github("rstudio/crosstalk")
##devtools::install_github("ropensci/plotly")
##devtools::install_github("hadley/ggplot2")
##devtools::install_github("hadley/scales")
#detach("package:plyr", unload=TRUE)
lapply(SYSTEM_REPORT_PKGS, library, character.only = TRUE)
### Read Target and Output SUmmary files
currDir <- getwd()
setwd(BASE_DATA_PATH)
base_csv = list.files(pattern="*.csv")
base_data <- lapply(base_csv, read.csv)
base_csv_names <- unlist(lapply(base_csv, function (x) {gsub(".csv", "", x)}))
setwd(BUILD_DATA_PATH)
build_csv = list.files(pattern="*.csv")
build_data <- lapply(build_csv, read.csv)
build_csv_names <- unlist(lapply(build_csv, function (x) {gsub(".csv", "", x)}))
## Read SHP file
setwd(SYSTEM_SHP_PATH)
zone_shp <- shapefile("zones_zone.shp")
zone_shp <- spTransform(zone_shp, CRS("+proj=longlat +ellps=GRS80"))
setwd(currDir)
### Generate dashboard
rmarkdown::render(file.path(SYSTEM_TEMPLATES_PATH, "SOABMDashboard.Rmd"),
output_dir = OUTPUT_PATH,
intermediates_dir = OUTPUT_PATH, quiet = TRUE)
SOABMDashboard.html <- readLines(file.path(OUTPUT_PATH, "SOABMDashboard.html"))
idx <- which(SOABMDashboard.html == "window.FlexDashboardComponents = [];")[1]
SOABMDashboard.html <- append(SOABMDashboard.html, "L_PREFER_CANVAS = true;", after = idx)
writeLines(SOABMDashboard.html, file.path(OUTPUT_PATH, "SOABMDashboard.html"))
# finish
?write
?write.data
paste(ABMOutputDir, paste("personData_",MAX_ITER, ".csv", sep = ""), sep = "/")
ABMOutputDir <- "E:/projects/clients/odot/ModelOutput/102717/outputs/other"
paste(ABMOutputDir, paste("personData_",MAX_ITER, ".csv", sep = ""), sep = "/")
MAX_ITER<-1
paste(ABMOutputDir, paste("personData_",MAX_ITER, ".csv", sep = ""), sep = "/")
SYSTEM_REPORT_PKGS <- c("reshape", "dplyr")
lib_sink <- suppressWarnings(suppressMessages(lapply(SYSTEM_REPORT_PKGS, library, character.only = TRUE)))
